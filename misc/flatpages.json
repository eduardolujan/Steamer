[
    {
        "pk": 1, 
        "model": "flatpages.flatpage", 
        "fields": {
            "registration_required": true, 
            "title": "An effortless system for monitoring provisioning.", 
            "url": "/doc/steamer/", 
            "template_name": "", 
            "sites": [
                1
            ], 
            "content": "<p>&nbsp;</p>\r\n<h2>An effortless system for monitoring provisioning.</h2>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<h3>Description</h3>\r\n<p class=\"normalp\">&nbsp;</p>\r\n<p class=\"normalp\"><span class=\"fancy\">/\u02c8st\u0113m\u0259r/:</span> A tool for&nbsp;<strong>provisioning monitoring services across multiple nagios instances,</strong>&nbsp;steamer is an in-progress atempt to automate the management of large nagios instalations.<br /><br />The projects aims towards:</p>\r\n<ul class=\"normalp\">\r\n<li>Automating nagios configuration generation</li>\r\n<li>Centralize nagios config definitions.</li>\r\n<li>Automate nagios config deployment with rollback capabilities.</li>\r\n<li>Restfull api for quit integration.&nbsp;</li>\r\n<li>Import tools.&nbsp;</li>\r\n</ul>\r\n<div>&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<h3>How it works</h3>\r\n<p>&nbsp;</p>\r\n<p class=\"normalp\">Steamer has a repository for all your nagios directives, based on that data it generates the nagios configurations which gets pushed via ssh to the managed nagios servers. It has a simple web app for showing some basic information and for basic template editing, a django-admin site, and a piston api which exposes all the admin functionallity.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<h3>Installation</h3>\r\n<p>&nbsp;</p>\r\n<p class=\"normalp\">&laquo;You may need some knollege on django deployment.&raquo;</p>\r\n<ol class=\"normalp\">\r\n<li>set up a fresh virtualenv :<br />useradd appuser &amp;&amp; su - appuser<br />virtualenv app &amp;&amp; . app/bin/activate &amp;&amp; cd app<br />pip install xxx yyy zzz&nbsp;<br />&nbsp;</li>\r\n<li>grab the code:<br /><br />git clone github.com/jfardello/Steamer.git steamer<br />vi custom_seting.py<br />&nbsp;</li>\r\n<li>there are some apache templates on misc/ refer to [deploying django], I personaly prefer the use of gunicorn, it's upt to you.<br />./manage.py syncdb<br />./manage.py loaddata misc/fpages.json<br />cp apache.sample /your/apache/vhosts/dir &amp;&amp; vi apache.sample<br />./manage.py collectstatic<br />./manage.py loaddata initial.json&nbsp;<br />gunicorn_django -D&amp;&nbsp;</li>\r\n</ol>\r\n<p class=\"normalp\">&nbsp;</p>\r\n<p class=\"normalp\">&nbsp;&nbsp;</p>\r\n<h3>Importing data</h3>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<ol class=\"normalp\">\r\n<li>Make sure that the user running the application is able to make passwordless key-based ssh connections to the hostnames defined in each deployable nagios config entry.</li>\r\n<li>Populate the db, you can model your data from scratch, or cou can import it as follows</li>\r\n<ul>\r\n<li>Copy a tarball with your nagios \"etc\" directory as the tarball root to the import directory.</li>\r\n<li>./mange.py import -f tarfile.tar &nbsp;nagios_server_hostname</li>\r\n</ul>\r\n<li>Relate via the admin admin interface, each host to the target nagios config.</li>\r\n<li>Export the config, you can do so via the admin actions, django management commands or via the steamer Lite app.</li>\r\n</ol>\r\n<p class=\"normalp\">Note that the&nbsp;import process probably wont run twice if you have many nagios instances, it would be better to merge them and them, import and then &nbsp;you can clone the nagios instance.)&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<h3>Recovering configs</h3>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>", 
            "enable_comments": false
        }
    }
]